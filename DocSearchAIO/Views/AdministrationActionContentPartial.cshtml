@model IEnumerable<DocSearchAIO.DocSearch.TOs.AdministrationActionSchedulerModel>

<div class="container mt-2">
    <div class="row">
        <div class="col-12">
            <span class="h5">Statistiken</span>
        </div>
    </div>
</div>
@foreach (var administrationActionSchedulerModel in Model)
{
    <div class="container mt-2 mb-2 border rounded border-color-gray">
        <div class="row mt-1">
            <div class="col-12">
                <span class="h5">Scheduler</span>
            </div>
        </div>
        <div class="row mt-1">
            <div class="col-3">Name</div>
            <div class="col-9">@(administrationActionSchedulerModel.SchedulerName)</div>
        </div>
        <div class="row mt-1">
            <div class="col-3 h6">Trigger</div>
            <div class="col-9">
                @foreach (var triggerModel in administrationActionSchedulerModel.Triggers)
                {
                    var triggerBatch = triggerModel.CurrentState.ToLower() switch{
                        "blocked" => "<span class=\"badge badge-warning\">Blockiert</span>",
                        "complete" => "<span class=\"badge badge-secondary\">Komplett</span>",
                        "error" => "<span class=\"badge badge-danger\">Fehler</span>",
                        "none" => "<span class=\"badge badge-info\">Kein Status</span>",
                        "normal" => "<span class=\"badge badge-success\">Normal</span>",
                        "paused" => "<span class=\"badge badge-primary\">Pausiert</span>",
                        _ => "span class=\"badge badge-secondary\">Unbekannt</span>"};
                    <div class="container mb-3 border rounded border-color-gray">
                        <div class="row mb-2">
                            <div class="col-3">Name</div>
                            <div class="col-9">@triggerModel.TriggerName</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-3">Aktueller Status</div>
                            <div class="col-9">@Html.Raw(triggerBatch)</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-3">Aktion</div>
                            <div class="col-9">
                                @if (triggerModel.CurrentState.ToLower() == "paused")
                                {
                                    <button type="button" disabled class="btn btn-secondary mr-2"><i class="bi bi-pause-btn"></i> Pause</button>
                                    if (triggerModel.CurrentState.ToLower() != "blocked")
                                    {
                                        <button type="button" class="btn btn-success mr-2" onclick="resumeTrigger('@triggerModel.TriggerName','@triggerModel.GroupName')"><i class="bi bi-play-btn"></i> Start</button>
                                    }
                                }
                                else
                                {
                                    <button type="button" class="btn btn-warning mr-2" onclick="pauseTrigger('@triggerModel.TriggerName','@triggerModel.GroupName')"><i class="bi bi-pause-btn"></i> Pause</button>
                                    <button type="button" disabled class="btn btn-secondary mr-2"><i class="bi bi-play-btn"></i> Start</button>
                                }
                                @if (triggerModel.CurrentState.ToLower() != "blocked" && triggerModel.CurrentState.ToLower() != "paused")
                                {
                                    <button type="button" class="btn btn-orange mr-2" onclick="instantStartJob('@triggerModel.JobName','@triggerModel.GroupName')"><i class="bi bi-recycle"></i> Indexieren</button>
                                    <button type="button" class="btn btn-danger mr-2" onclick="reindexAndStartJob('@triggerModel.JobName','@triggerModel.GroupName')"><i class="bi bi-exclamation-diamond"></i> Reindexieren</button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-secondary mr-2" disabled><i class="bi bi-recycle"></i> Indexieren</button>
                                    <button type="button" class="btn btn-secondary mr-2" disabled><i class="bi bi-exclamation-diamond"></i> Reindexieren</button>
                                }

                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <script type="application/javascript">
            instantStartJob = (jobId, groupId) => {
                var request = {
                    jobName: jobId,
                    groupId: groupId
                };
                $.ajax({
                    url: "/api/administration/instantStartJob",
                    method: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: JSON.stringify(request)
                })
                .done(function (){
                    loadActionContent()
                })
                .fail(function (){
                    showAlert("Ein Fehler ist beim abrufen von Daten aufgetreten!", "alert-danger");
                });                
            }
        
             reindexAndStartJob = (jobId, groupId) => {
                 var request = {
                     jobName: jobId,
                     groupId: groupId
                 };
                 $.ajax({
                     url: "/api/administration/reindexAndStartJob",
                     method: "POST",
                     contentType: "application/json",
                     dataType: "json",
                     data: JSON.stringify(request)
                 })
                 .done(function (){
                     loadActionContent()
                 })
                 .fail(function (){
                     showAlert("Ein Fehler ist beim abrufen von Daten aufgetreten!", "alert-danger");
                 });                
             }           
            
            resumeTrigger = (triggerId, triggerGroup) => {
                var request = {
                    triggerId: triggerId,
                    groupId: triggerGroup
                };
                
                $.ajax({
                    url: "/api/administration/resumeTrigger",
                    method: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: JSON.stringify(request)
                })
                .done(function (){
                    loadActionContent()
                })
                .fail(function (){
                    showAlert("Ein Fehler ist beim abrufen von Daten aufgetreten!", "alert-danger");
                });
            }
        
            pauseTrigger = (triggerId, triggerGroup) => {
                var request = {
                    triggerId: triggerId,
                    groupId: triggerGroup
                };
                
                $.ajax({
                    url: "/api/administration/pauseTrigger",
                    method: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: JSON.stringify(request)
                })
                .done(function (){
                    loadActionContent()
                })
                .fail(function (){
                    showAlert("Ein Fehler ist beim abrufen von Daten aufgetreten!", "alert-danger");
                });
            }
            
        </script>
    </div>
}